{{- define "system_includes" }}
#include <ros/ros.h>
{{- end -}}

{{- define "constants" }}
// no constants defined
{{- end -}}

{{- /* Expand to the name of a printf-style function used for logging. */ -}}
{{- define "log" -}}
  ROS_{{ toUpper . }}
{{- end -}}

{{- /* Takes the Channel of a callback, returns its argument set (should be empty for an input). */ -}}
{{- define "callback_args" -}}
{{-   if .IsIn -}}
  const std_msgs::Bool::ConstPtr& msg
{{-   else -}}
  const std_msgs::String::ConstPtr& msg
{{-   end -}}
{{- end -}}

{{- /* Takes the Value received in an output callback, compares it against parameter `value`. */ -}}
{{- define "callback_compare" -}}
  std::string(msg->data.c_str()).compare("{{ .StringValue }}") == 0
{{- end -}}

{{/* ROS initialisation code. */}}
{{- define "init" }}
  ros::init(argc, argv, "{{ .Name }}");
  ros::NodeHandle nh;
{{- end -}}

{{- define "callback_init" }}
  auto {{ .Name }}_sub = nh.subscribe("{{ .Name }}{{ if .IsIn }}_ack{{ end }}", 10, &StateMachine::{{ cppCallbackName . }}, &stm)
{{- end -}}

{{/*
The main loop or spin of the test driver, coming between initialisation and cleanup.

Should have an indent of 2, and has the state machine as dot.
*/}}
{{- define "spin" }}
  ros::spin();
{{- end -}}

{{/* We don't override "main_args" here. */}}

{{- template "base.cpp.tmpl" . -}}