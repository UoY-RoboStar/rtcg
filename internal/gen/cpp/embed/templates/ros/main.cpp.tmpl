{{- /*
The top-level ROS1 template.

This overrides and implements various parts of the base C++ template to use
ROS primitives and concepts, then delegates to that template.
*/ -}}
{{- $ctype := $.ChannelTypes }}

{{- define "system_includes" }}
#include "ros/ros.h"
#include "std_msgs/Bool.h"
#include "std_msgs/String.h"
{{- end -}}

{{- define "constants" }}
const int TIMEOUT_SEC     = 15;
const int INPUT_DELAY_SEC = 3;
{{- end -}}

{{- /* Starts and ends a stream-style log statement. */ -}}
{{- define "log" -}}ROS_{{ toUpper . }}_STREAM({{- end -}}
{{- define "end_log" }} << std::endl);{{- end -}}

{{- define "topic_name" -}}{{ toLowerUnderscored .Channel.Name }}{{- end -}}
{{- define "publisher_name" -}}{{ template "topic_name" . }}_pub{{- end -}}
{{- define "subscriber_name" -}}{{ template "topic_name" . }}_sub{{- end -}}

{{- /* Placeholder for when an input is required. */ -}}
{{- define "input" }}
  {{ template "publisher_name" . }}_.publish({{ cppConvertTo .Channel.Name }}({{ cppValue .Value }}));
{{- end }}

{{- /* Returns the argument set of the timeout callback. */ -}}
{{- define "timeout_callback_args" -}}
  const ros::TimerEvent& event
{{- end -}}

{{- /* Returns the argument set of the initial delay callback. */ -}}
{{- define "initial_delay_callback_args" -}}
  const ros::TimerEvent& event
{{- end -}}

{{- /* Returns the argument set of an input-accepted callback. */ -}}
{{- define "in_callback_args" -}}
  const battery_monitor::InputAccepted::ConstPtr& msg
{{- end -}}

{{/* ROS initialisation code. */}}
{{- define "pre_init" }}
  ros::init(argc, argv, "{{ .Name }}");
  ros::NodeHandle nh;

  // Publishers
{{-   range .Transitions.In }}
  auto {{ template "publisher_name" . }} = nh.advertise<{{ cppChannelValueType .Channel.Name }}>("{{ cppChannelTopicName $.ChannelTopics .Channel.Name }}", 1000);
{{-   end }}
{{- end }}

{{- define "init" }}
  // Subscribers
{{-   if .Transitions.HasIn }}
  auto input_accepted_sub = nh.subscribe("{{ cppChannelTopicName $.ChannelTopics "inputAccepted" }}", 10, &StateMachine::inputAcceptedCallback, &stm);
{{-   end }}
{{   range .Transitions.Out }}
  auto {{ template "subscriber_name" . }} = nh.subscribe("{{ cppChannelTopicName $.ChannelTopics .Channel.Name }}", 10, &StateMachine::{{ cppCallbackName .Channel.Name }}, &stm);
{{-   end }}

  // Timers
  auto timeout_timer = nh.createTimer(ros::Duration(TIMEOUT_SEC), &StateMachine::timeoutCallback, &stm);

{{- /* If the first state has an input transition, we delay the test to allow the SUT to warm up: */ -}}
{{-   if .Transitions.FirstStateHasIn }}
  auto initial_delay_timer = nh.createTimer(ros::Duration(INPUT_DELAY_SEC), &StateMachine::initialDelayCallback, &stm);
{{-   end }}
{{- end -}}

{{-
/*
 * State machine
 */
-}}

{{- /* Adding the ROS handles to the state machine fields: */ -}}
{{- define "stm_fields" }}

  // Publisher handles
{{-   range .Transitions.In }}
  ros::Publisher {{ template "publisher_name" . }}_;
{{-   end }}
{{- end -}}

{{- /* Adding them to the constructor also: */ -}}
{{- define "stm_ctor_params" -}}
{{-   range $i, $t := .Transitions.In -}}
{{-     if ne $i 0 -}}, {{ end -}}
ros::Publisher {{ template "publisher_name" $t }}
{{-   end -}}
{{- end -}}

{{- define "stm_ctor_args" -}}
{{-   range $i, $t := .Transitions.In -}}
{{-     if ne $i 0 -}}, {{ end -}}
{{      template "publisher_name" $t }}
{{-   end -}}
{{- end -}}

{{- define "stm_ctor" }}

  // Install the publisher handles
{{-   range .Transitions.In }}
  {{ template "publisher_name" . }}_ = {{ template "publisher_name" . }};
{{-   end -}}
{{- end -}}

{{- /* Making sure ending the test ends ROS: */ -}}
{{- define "stm_end" }}
  ros::shutdown();
{{- end -}}

{{/*
The main loop or spin of the test driver, coming between initialisation and cleanup.

Should have an indent of 2, and has the state machine as dot.
*/}}
{{- define "main_body" }}
{{- end -}}

{{/* We don't override "main_args" here. */}}

{{- template "base.cpp.tmpl" . -}}