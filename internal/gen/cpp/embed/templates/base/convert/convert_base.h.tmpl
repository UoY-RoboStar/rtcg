{{- /*
convert.base.h.tmpl expands to the base header for channel types and overrides.

It expects the full context as dot.

Base indent is set at 0.
*/ -}}
//
// Conversion functions for test {{ .Name }}
//
// Test autogenerated by rtcg on {{ .Date }}
//

#ifndef CONVERT_H_DEFINED
#define CONVERT_H_DEFINED
{{/* Bring any user-defined includes into scope, as they'll likely define override types: */ -}}
{{- range .Includes }}
#include {{ if .IsSystem -}} < {{- else -}} " {{- end -}} {{ .Src }} {{- if .IsSystem -}} > {{- else -}} " {{- end }}
{{- end }}


// Value type definitions
//
// These are used in the test driver wherever we need a plain value of the type
// expected by the SUT.
//
// We use #define instead of typedef/using to avoid problems if there are
// hidden type parameters (for instance, the allocators in ROS strings).
{{ range $i, $ch := .Transitions.Channels -}}
{{-   with index $.ChannelTypes $ch.Name }}
#define {{ cppChannelValueType $ch }} {{ if .HasOverride }}{{ .Override }}{{ else }}{{ template "type" .Base }}{{ end }}
{{-   end }}
{{- end }}


// Message type definitions
//
// These are used in output callbacks, and refer to the type of messages being
// sent from the SUT.  These can differ from the value types; for instance, in
// ROS, they are pointers to values rather than copies.
{{ range .Transitions.Channels }}
#define {{ cppChannelMsgType . }} {{ template "msg_type" . }}
{{- end }}

//
// Conversion functions
//
// We use these to convert from basic C++ types (int, std::string, etc) to
// and from the types mentioned above.
//
// Wherever a function has 'User override supplied' next to it, there must be a
// definition of that function somewhere in the compilation unit.
//

// Converting from channel message types to basic types
{{- range $i, $ch := .Transitions.Channels -}}
{{-   with index $.ChannelTypes $ch.Name }}

{{ cppType .Base }} {{ cppConvertFrom $ch }}(const {{ cppChannelMsgType $ch }} msg)
{{-     if .HasOverride -}}
; // User override supplied
{{-     else }}
{
{{- template "convert_from" .Base }}
}
{{-     end -}}
{{-   end }}
{{- end }}

// Converting from basic types to channel value types
{{- range $i, $ch := .Transitions.Channels -}}
{{-   with index $.ChannelTypes $ch.Name }}

{{ cppChannelValueType $ch }} {{ cppConvertTo $ch }}(const {{ cppType .Base }} value)
{{-     if .HasOverride -}}
; // User override supplied
{{-     else }}
{
    {{- template "convert_to" .Base }}
}
{{-     end -}}
{{-   end }}
{{- end }}

#endif // CONVERT_H_DEFINED
