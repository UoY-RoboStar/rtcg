//
// Test {{ .Name }}
//
// Test autogenerated by rtcg on {{ .Date }}
//

#include <cstring>
#include <cstdio>
#include <string>

{{- /* Allow variants to add more system includes (such as ROS) here: */ -}}
{{- block "system_includes" . }}
{{- end -}}
{{- /* Allow the config file to add even more includes here: */ -}}
{{- range .Includes }}
#include {{ if .IsSystem -}} < {{- else -}} " {{- end -}} {{ .Src }} {{- if .IsSystem -}} > {{- else -}} " {{- end }}
{{- end }}

#include "../rtcg/rtcg.h" // Helper definitions (compile with ../rtcg/rtcg.cpp)

//
// TYPEDEFS
//

{{- range $i, $tr := .Transitions.All -}}
{{-   with $ctype := index $.ChannelTypes $tr.Channel.Name }}
using {{ cppChannelType $tr.Channel }} = {{ if $ctype.HasOverride }}{{ $ctype.Override }}{{ else }}{{ template "type" $ctype.Base}}{{ end }};
{{-   end }}
{{- end }}

//
// CONSTANTS
//
{{ block "constants" . }}
{{- end }}


//
// TEST VERDICTS
//
// In non-factorised tests, there will usually only be one test verdict;
// factorised tests may have multiple.
//
{{ template "verdict.cpp.tmpl" .Stm.Tests.Values }}


//
// STATES
//
// Every step in the test has a corresponding state in the test state machine.
// For non-factorised tests, these relate directly to points on the trace.
//
{{ template "state_meta.cpp.tmpl" .Stm.States }}


//
// STATE MACHINE
//
{{ template "stm.cpp.tmpl" . }}


//
// ENTRY POINT
//
{{ template "entry.cpp.tmpl" . }}
