{{/*
stm.cpp.tmpl expands into the state machine for the tester.

It expects the test context as its dot.
*/}}
// The main testing state machine, containing all state used in the test.
class StateMachine : public rtcg::TestCase
{
public:
  StateMachine({{ block "stm_ctor_params" . }}{{ end }});
  Verdict& getVerdict(); // Gets the current verdict.

  //
  // Callbacks
  //

  void timeoutCallback({{ template "timeout_callback_args" }});  // Called when the test has run out of time.

{{- if .Transitions.FirstStateHasIn }}
  void initialDelayCallback({{ template "initial_delay_callback_args" }});  // Called after the initial delay timer.
{{- end }}

{{- if .Transitions.HasIn }}
  void inputAcceptedCallback({{ template "in_callback_args" }});  // Called when the SUT accepts an input.
{{- end }}

  // Output callbacks:
{{- range .Transitions.Out }}
  void {{ cppCallbackName .Channel.Name }}(const {{ cppChannelMsgType .Channel.Name }} msg);
{{- end }}
{{- range cppOtherOutChannels .Transitions.Out .Channels }}
  void {{ cppCallbackName .Name }}(const {{ cppChannelMsgType .Name }} msg);
{{- end }}
private:
  Verdict verdict_;
  State state_ = {{ (index .Stm.States 0).ID | cppStateEnum }};
{{- block "stm_fields" . -}}{{- end }}

  // State entry functions
{{- range .Stm.States }}
  void {{ cppStateEntry .ID }}();
{{- end }}

  const char* stateName();       // Gets the name of the current state.
  void end(rtcg::Status status); // Ends the test with the given status.
};

StateMachine::StateMachine({{ template "stm_ctor_params" . }})
{
{{- if .Transitions.FirstStateHasIn }}
  // This test's first state has an input, so we delay entry into the initial
  // state to initialDelayCallback.
  status_ = rtcg::Status::WAIT_START;
{{- else }}
  {{ cppStateEntry .Stm.InitialState }}();
{{- end -}}
{{- block "stm_ctor" . }}{{ end }}
}

Verdict& StateMachine::getVerdict()
{
  return verdict_;
}

const char* StateMachine::stateName()
{
  return state::name(state_);
}

void StateMachine::end(rtcg::Status s)
{
  if (!rtcg::status::isRunning(status_))
  {
    {{ template "log" "error" }}"Tried to end test twice (first as " << status_ << ", then as " << s << "."{{ template "end_log" }}
    return;
  }

  if (rtcg::status::isRunning(s))
  {
    {{ template "log" "error" }}"Tried to end with a non-ending status " << s << "."{{ template "end_log" }}
    s = rtcg::Status::BUG;
  }

  status_ = s;
{{- /* Depending on the way we're running the tests, we may need extra code here to abort the test: */ -}}
{{- block "stm_end" . -}}{{- end }}
}


//
// Callback functions
//

void StateMachine::timeoutCallback({{ template "timeout_callback_args" }})
{
  // Don't acknowledge this callback if we've already timed out.
  if (!rtcg::status::isRunning(status_))
    return;

  {{ template "log" "info" }}"Timeout!"{{ template "end_log" }}
  end(rtcg::Status::TIMEOUT);
}

{{- if .Transitions.FirstStateHasIn }}

void StateMachine::initialDelayCallback({{ template "initial_delay_callback_args" }})
{
  // Only acknowledge this callback if we're actually waiting to start.
  if (status_ != rtcg::Status::WAIT_START)
    return;

  {{ template "log" "info" }}"Initial delay finished, now entering first state."{{ template "end_log" }}
  {{ cppStateEntry .Stm.InitialState }}();
}
{{- end }}

{{- if .Transitions.HasIn }}

void StateMachine::inputAcceptedCallback({{ template "in_callback_args" }})
{
{{-   block "in_callback" .Transitions.InMerged }}
{{-     template "in_callback.cpp.tmpl" . }}
{{-   end -}}
}
{{- end }}

{{- range .Transitions.Out }}

void StateMachine::{{ cppCallbackName .Channel.Name }}(const {{ cppChannelMsgType .Channel.Name }} msg)
{
{{- block "out_callback" . }}
{{-   template "out_callback.cpp.tmpl" . }}
{{- end -}}
}
{{- end }}

{{- range cppOtherOutChannels .Transitions.Out .Channels }}

void StateMachine::{{ cppCallbackName .Name }}(const {{ cppChannelMsgType .Name }} msg)
{
  ROS_INFO_STREAM("Unexpected message for {{ . }}." << std::endl);
  end(rtcg::Status::OFF_SCRIPT);
}
{{- end }}

//
// State machine entry functions
//

{{- range .Stm.States }}

void StateMachine::{{ cppStateEntry .ID }}()
{
  state_ = {{ cppStateEnum .ID }};
{{ block "state" . }}
{{- template "state_entry.cpp.tmpl" . -}}
{{- end }}
}
{{- end }}