{{/*
stm.cpp.tmpl expands into the state machine for the tester.

It expects the test context as its dot.
*/}}
// The main testing state machine.
class StateMachine
{
public:
  StateMachine({{ block "stm_ctor_params" . }}{{ end }});

  rtcg::Status getStatus();
  void dumpVerdict();

private:
  Verdict verdict;
  State state = {{ (index .Stm.States 0).ID | cppStateEnum }};
  rtcg::Status status = rtcg::Status::RUNNING;
{{- block "stm_fields" . -}}{{- end }}

  // Callbacks
{{- range .Transitions }}
  void {{ cppCallbackName .Channel }}({{ template "callback_args" .Channel }});
{{- end }}

  // State entry functions
{{- range .Stm.States }}
  void {{ cppStateEntry .ID }}();
{{- end }}

  void end(rtcg::Status why);
  void transitionTo(State next);
};

StateMachine::StateMachine({{ template "stm_ctor_params" . }})
{
  {{ cppStateEntry .Stm.InitialState }}();
  {{- block "stm_ctor" . }}{{ end }}
}

rtcg::Status StateMachine::getStatus()
{
  return status;
}

void StateMachine::end(rtcg::Status why)
{
  status = why;
{{- block "end" . }}
{{- end }}
}

void StateMachine::dumpVerdict()
{
  verdict.dump();
}


//
// Callback functions
//
{{- range .Transitions }}

void StateMachine::{{ cppCallbackName .Channel }}({{ template "callback_args" .Channel }})
{
{{- block "callback" . }}
{{-   template "callback.cpp.tmpl" . }}
{{- end -}}
}
{{- end }}


//
// State machine entry functions
//

{{- range .Stm.States }}

void StateMachine::{{ cppStateEntry .ID }}()
{
  state = {{ cppStateEnum .ID }};
{{ block "state" . }}
{{- template "state.cpp.tmpl" . -}}
{{- end }}
}
{{- end }}