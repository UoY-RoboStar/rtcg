{{/*
stm.cpp.tmpl expands into the state machine for the tester.

It expects the state machine as its dot.
*/}}

// Indices of states in the state machine.
enum class State
{
{{- range $i, $s := .States }}
  {{ cppEnumField $s.ID }} = {{ $i }},
{{- end }}
};
static const size_t NUM_STATES = {{ len .States }};

// The main testing state machine.
class StateMachine
{
public:
  Status getStatus();
  void dumpVerdict();

private:
  Verdict verdict;
  State state = {{ (index .States 0).ID | cppStateEnum }};
  Status status = Status::RUNNING;

  // Callbacks
{{- range .TransitionSets }}{{ if not .Channel.IsIn }}
  void {{ .Channel.Name }}Callback({{ template "callback_arg_type" }} value);
{{- end }}{{ end }}

  // State entry functions
{{- range .States }}
  void {{ cppStateEntry .ID }}();
{{- end }}

  void end(Status why);
};

Status StateMachine::getStatus()
{
  return status;
}

void StateMachine::end(Status why)
{
  status = why;
{{- block "end" . }}
{{- end }}
}

void StateMachine::dumpVerdict()
{
  verdict.dump();
}

//
// Callback functions
//

{{- range .TransitionSets }}{{ if not .Channel.IsIn }}
void StateMachine::{{ .Channel.Name }}Callback({{ template "callback_arg_type" }} value)
{
{{- block "callback" . }}
{{-   template "callback.cpp.tmpl" . }}
{{- end }}
}
{{- end }}{{ end }}


//
// State machine entry functions
//

{{- range .States }}

void StateMachine::{{ cppStateEntry .ID }}()
{
{{- block "state" . }}
{{- template "state.cpp.tmpl" . -}}
{{- end }}
}
{{- end }}