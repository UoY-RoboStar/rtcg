//
// Test {{ .Name }}
//
// Test autogenerated by rtcg on {{ .Date }}
//

{{- block "includes" . }}

// System includes
#include <array>
#include <stdlib.h>
#include <stdio.h>

{{-   block "system_includes" . }}
{{-   end }}

// Includes for this model:
{{-   block "custom_includes" . }}
{{-   end }}
{{- end }}

//
// CONSTANTS
//

{{ block "constants" . }}
{{- end }}


//
// OUTCOMES
//

// An inconclusive, passing, or failing outcome.
enum class Outcome {
    INC,
    PASS,
    FAIL
};

// A string representation of an outcome.
const char* outstr(Outcome o)
{
  switch (o) {
  case Outcome::INC:
    return "inconclusive";
  case Outcome::PASS:
    return "passed";
  case Outcome::FAIL:
    return "failed";
  }
  return "???";
}


//
// TEST METADATA
//
// For non-factorised tests, there will likely only be one test captured by this test case.
//
{{ template "test_meta.cpp.tmpl" .Stm.Tests.Values }}

//
// VERDICTS
//
{{ template "verdict.cpp.tmpl" .Stm.Tests.Values }}


//
// STATE MACHINE
//
{{ template "stm.cpp.tmpl" .Stm }}


int main(int argc, char** argv)
{
{{- block "body" . }}
  // Initialisation code
{{-   block "init" . }}
  auto* stm = new StateMachine();
{{-   end }}

  // Test code
{{-   block "tester" . }}
{{ template "spin" . }}
{{-   end }}

  // Teardown code
{{-   block "aftermath" . }}
  {{ template "log" "info" }}("test finished due to %s\n", explain(stm->getStatus()));

  stm->dumpVerdict();

  delete stm;
{{-   end }}
{{- end }}
}