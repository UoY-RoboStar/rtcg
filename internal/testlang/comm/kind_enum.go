// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package comm

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// KindIn is a Kind of type In.
	// An event input.
	KindIn Kind = iota
	// KindOut is a Kind of type Out.
	// An event output.
	KindOut
	// KindCall is a Kind of type Call.
	// An operation call.
	KindCall
)

var ErrInvalidKind = errors.New("not a valid Kind")

const _KindName = "inoutcall"

var _KindMap = map[Kind]string{
	KindIn:   _KindName[0:2],
	KindOut:  _KindName[2:5],
	KindCall: _KindName[5:9],
}

// String implements the Stringer interface.
func (x Kind) String() string {
	if str, ok := _KindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Kind(%d)", x)
}

var _KindValue = map[string]Kind{
	_KindName[0:2]:                  KindIn,
	strings.ToLower(_KindName[0:2]): KindIn,
	_KindName[2:5]:                  KindOut,
	strings.ToLower(_KindName[2:5]): KindOut,
	_KindName[5:9]:                  KindCall,
	strings.ToLower(_KindName[5:9]): KindCall,
}

// ParseKind attempts to convert a string to a Kind.
func ParseKind(name string) (Kind, error) {
	if x, ok := _KindValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _KindValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Kind(0), fmt.Errorf("%s is %w", name, ErrInvalidKind)
}

// MarshalText implements the text marshaller method.
func (x Kind) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Kind) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseKind(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
