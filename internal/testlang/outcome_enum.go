// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.5
// Revision: b9e7d1ac24b2b7f6a5b451fa3d21706ffd8d79e2
// Build Date: 2023-01-30T01:49:43Z
// Built By: goreleaser

package testlang

import (
	"errors"
	"fmt"
	"strings"
)

const (
	// OutcomeInc is a Outcome of type Inc.
	// Inconclusive status.
	OutcomeInc Outcome = iota
	// OutcomeFail is a Outcome of type Fail.
	// Failing status.
	OutcomeFail
	// OutcomePass is a Outcome of type Pass.
	// Passing status.
	OutcomePass
)

var ErrInvalidOutcome = errors.New("not a valid Outcome")

const _OutcomeName = "incfailpass"

var _OutcomeMap = map[Outcome]string{
	OutcomeInc:  _OutcomeName[0:3],
	OutcomeFail: _OutcomeName[3:7],
	OutcomePass: _OutcomeName[7:11],
}

// String implements the Stringer interface.
func (x Outcome) String() string {
	if str, ok := _OutcomeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Outcome(%d)", x)
}

var _OutcomeValue = map[string]Outcome{
	_OutcomeName[0:3]:                   OutcomeInc,
	strings.ToLower(_OutcomeName[0:3]):  OutcomeInc,
	_OutcomeName[3:7]:                   OutcomeFail,
	strings.ToLower(_OutcomeName[3:7]):  OutcomeFail,
	_OutcomeName[7:11]:                  OutcomePass,
	strings.ToLower(_OutcomeName[7:11]): OutcomePass,
}

// ParseOutcome attempts to convert a string to a Outcome.
func ParseOutcome(name string) (Outcome, error) {
	if x, ok := _OutcomeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _OutcomeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Outcome(0), fmt.Errorf("%s is %w", name, ErrInvalidOutcome)
}

// MarshalText implements the text marshaller method.
func (x Outcome) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Outcome) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseOutcome(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
